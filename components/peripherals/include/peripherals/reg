/*
 * Copyright (C) 2024 Commissariat à l'énergie atomique et aux énergies alternatives (CEA)

 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *    http://www.apache.org/licenses/LICENSE-2.0 

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

#ifndef REG_PERIPH
#define REG_PERIPH

// this is an experimental MACRO-based peripheral interface,

#define GET_BITS(reg, off, len) (((*(uint64_t*)&getLocalMem()[(reg)]) >> (off)) & ((1<<(len))-1))
#define SET_BITS(reg, off, len, v) (*(uint64_t*)&getLocalMem()[(reg)]) = ((*(uint64_t*)&getLocalMem()[(reg)]) & ~( ((1<<(len))-1)<<(off))) | ((v)<<(off))
#define GET_BIT(reg, off) GET_BITS(reg, off, 1)
#define SET_BIT(reg, off, v) SET_BITS(reg, off, 1, v)

#define IMPL_REG string last_checked_reg; bool handled=false; uint64_t offs=payload.addr-getBaseAddress()
#define REG(regname, reg, len) last_checked_reg=regname;if (offs >= reg && offs<reg+len && (handled=true))
#define END_IMPL_REG
#define REG_READ() memcpy(payload.ptr, getLocalMem()+offs, payload.len)
#define REG_WRITE() memcpy(getLocalMem()+offs, payload.ptr, payload.len)

#endif